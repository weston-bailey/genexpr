require ("fsDSPLibrary.genexpr");
//top mixer
mainMixIn(dryL, dryR, wetL, wetR, trig){
    Param tailDur(min=20);
    Param tailTarg(0, min=0, max=1);
    Param auxMode0(0);
    
    trig = trig > 0;

    fadeInv = line(trig, dur=20);
    fade = 1 - fadeInv;
    
    t, d, s = 0;
    if (trig == 1){
            t, d, s = 1., 20., 0.;
        }
        else {
            t, d, s = tailTarg, tailDur, 0.5; 
        }
    
    tail, flag = curve(t, d, s);

    dryL = dryL * fade;
    dryR = dryR * fade;
    wetL = wetL * tail;
    wetR = wetR * tail;

    yL = dryL + wetL;
    yR = dryR + wetR;

    auxOutL = yL * auxMode0;
    auxOutR = yR * auxMode0;

    return yL, yR, auxOutL, auxOutR, flag;

}
//bottom mixer
mainMixOut(dryL, dryR, auxInL, auxInR, trig){

    History xFade0(1.0);
    History xFade1(0.0);

    Param auxMode1(0);
    Param xFade(0, min=0., max=.25);

    sXfade = mixSmooth(xFade, .999);

    if (change(sXfade)){
        xFade0, xFade1 = stereoXfade(sXfade);
    }
        else{
            xFade0, xFade1 = xFade0, xFade1;
    }

    trig = trig > 0;

    fadeInv = line(trig, dur=20);
    fade = 1 - fadeInv;
    
    fxL, fxR, auxOutL, auxOutR, bypassL, bypassR, dryXL, dryXR = 0;
    if (auxMode1 == 0){
            fxL = ((dryL * xFade0) + (auxInL * xFade1)) * fadeInv;
            fxR = ((dryR * xFade0) + (auxInR * xFade1)) * fadeInv;
            bypassL = dryL * fade;
            bypassR = dryR * fade;
            auxOutL = dryL * fadeInv; 
            auxOutR = dryR * fadeInv;
        }
        else if (auxMode1 == 1){
            dryXL = ((dryL * xFade0) + (auxInL * xFade1));
            dryXR = ((dryR * xFade0) + (auxInR * xFade1));
            bypassL = dryXL * fade;
            bypassR = dryXR * fade;
            fxL = dryXL * fadeInv;
            fxR = dryXR * fadeInv;
            auxOutL, auxOutR = 0;
    }

    return bypassL, bypassR, fxL, fxR, auxOutL, auxOutR;

}

//for fx mixer
Param width(1, min=0.0, max=2.0);
Param haas(0.0, min=0.0, max=20.0);
Param bal(0.5, min=0.0, max=1.0);
Param gain(1);
Param drywet(1.0, min=0.0, max=1.0);

Param auxMode0(0);
Param tailDur(20, min = 20);
Param tailTarg(min=0, max=1);

//smoothing for fx mixer
sWidth = mixSmooth(width, .999);
sHaas = mixSmooth(haas, .999);
sBal = mixSmooth(bal, .999);
sGain = mixSmooth(gain, .999);
sDrywet = mixSmooth(drywet, .999);

dryL, dryR, chainL, chainR, wetL, wetR = in1, in2, in3, in4, in5, in6;
trig0 = in7;

y0L, y0R, auxOutL, auxOutR, flag = mainMixIn(chainL, chainR, wetL, wetR, trig0, tailTarg=tailTarg, tailDur=tailDur, auxMode0=auxMode0);

y1L, y1R = fxMixer(dryL, dryR, y0L, y0R, sWidth, sHaas, sBal, sGain, sDrywet);

out1 = y1L;
out2 = y1R;
out3 = auxOutL;
out4 = auxOutR;
out5 = flag;
