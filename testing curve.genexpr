require ("fsDSPLibrary.genexpr");
//yop mixer
mainMixIn(dryL, dryR, wetL, wetR, trig){

    Param tailDur(min=20);

    trig = trig > 0;

    fadeInv = line(trig, dur=20);
    fade = 1 - fadeInv;
    
    t, d, s = 0;
    if (trig == 1){
            t, d, s = 1., 20., 0.;
        }
        else {
            t, d, s = 0., tailDur, 0.5; 
        }
    
    tail, flag = curve(t, d, s);

    dryL = dryL * fade;
    dryR = dryR * fade;
    wetL = wetL * tail;
    wetR = wetR * tail;

    yL = dryL + wetL;
    yR = dryR + wetR;

    return yL, yR, flag;

}
//bottom mixer
mainMixOut(dryL, dryR, trig){

    trig = trig > 0;

    fadeInv = line(trig, dur=20);
    fade = 1 - fadeInv;

    bypassL = dryL * fade;
    bypassR = dryR * fade;
    fxL = dryL * fadeInv;
    fxR = dryR * fadeInv;

    return bypassL, bypassR, fxL, fxR;

}

Param tailDur(20, min = 20);
Param auxOut(0);
Param auxIn(0);

chainL = in1;
chainR = in2;
auxInL = in3;
auxInR = in4;
wetL = in5;
wetR = in6;
trig0 = in7;
trig1 = in8;

yL, yR, flag = mainMixIn(chainL, chainR, wetL, wetR, trig0, tailDur=tailDur);

xL, xR, auxOutL, auxOutR = 0;
if (auxOut == 0){
            auxOutL, auxOutR = 0;
    }
    else if (auxOut == 1){
            auxOutL, auxOutR = yL, yR;
}
if (auxIn == 0){
            xL, xR = yL, yR;
    }
    else if (auxOut == 1){
            xL, xR = auxInL, auxInR;
}

bL, bR, fL, fR = mainMixOut(xL, xR, trig1);

out1 = bL;
out2 = bR;
out3 = fL;
out4 = fR;
out5 = auxOutL;
out6 = auxOutR;
out7 = flag;

